{"version":3,"sources":["Components/Shared/Navbar.js","Components/Home/GroupHeader.js","Components/Home/GroupedCheckin.js","Components/Home/Home.js","Components/Visualization/Visualization.js","Components/Shared/Toast.js","App.js","index.js"],"names":["Navbar","setDisplayHome","useState","Date","toLocaleTimeString","hour","minute","Time","setTime","useEffect","TimeInterval","setInterval","clearInterval","className","onClick","GroupHeader","content","GroupedCheckin","data","AllCheckIns","setAllCheckIns","date","hours","tag","activity","NewAllCheckIns","index","findIndex","CheckIn","splice","localStorage","JSON","stringify","Home","CheckInsGroupedByDate","CheckInsGroupedByTag","setSuccess","setError","hoursRef","useRef","tagRef","activityRef","GroupByRef","GroupBy","setGroupBy","htmlFor","name","id","value","ref","onChange","current","output","length","group","push","i","checkins","checkin","renderCheckInsGroupedByDate","renderCheckInsGroupedByTag","onSubmit","e","preventDefault","parseFloat","toLocaleDateString","setTimeout","type","step","Visualization","TagChartLabels","TagChartData","DayChartLabels","DayChartData","DisplayChart","setDisplayChart","DisplayChartRef","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","indexAxis","elements","bar","responsive","plugins","legend","position","title","display","text","Toast","App","DisplayHome","Success","Error","setCheckInsGroupedByDate","setCheckInsGroupedByTag","setTagChartLabels","setTagChartData","setDayChartLabels","setDayChartData","parse","NewCheckInsGroupedByDate","dates","map","filter","undefined","NewCheckInsGroupedByTag","tags","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3729ddfe.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function Navbar({ setDisplayHome }) {\n    const [Time, setTime] = useState(\n        new Date().toLocaleTimeString([], {\n            hour: \"numeric\",\n            minute: \"numeric\",\n        })\n    );\n\n    // Updates Time every 1000ms\n    useEffect(() => {\n        let TimeInterval = setInterval(() => {\n            setTime(\n                new Date().toLocaleTimeString([], {\n                    hour: \"numeric\",\n                    minute: \"numeric\",\n                })\n            );\n        }, 1000);\n        return () => {\n            clearInterval(TimeInterval);\n        };\n    }, []);\n\n    return (\n        <div className=\"Navbar\">\n            <div className=\"Left\">\n                <span>{Time}</span>\n            </div>\n            <div className=\"Right\">\n                <span onClick={() => setDisplayHome(true)}>Home</span>\n                <span onClick={() => setDisplayHome(false)}>Visualization</span>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default function GroupHeader({ content }) {\n    return (\n        <div className=\"GroupHeader\">\n            <div className=\"content\">{content}</div>\n            <div className=\"line\"></div>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default function GroupedCheckin({\n    data,\n    className,\n    AllCheckIns,\n    setAllCheckIns,\n}) {\n    return (\n        <div className={className}>\n            <span>{data.date}</span>\n            <span>{data.hours}</span>\n            <span>{data.tag}</span>\n            <span>{data.activity}</span>\n            {className === \"GroupedCheckin\" ? (\n                <div\n                    className=\"Delete\"\n                    onClick={() => {\n                        let NewAllCheckIns = [...AllCheckIns];\n                        const index = AllCheckIns.findIndex(\n                            (CheckIn) =>\n                                CheckIn.date === data.date &&\n                                CheckIn.tag === data.tag &&\n                                CheckIn.activity === data.activity\n                        );\n                        NewAllCheckIns.splice(index, 1);\n                        setAllCheckIns(NewAllCheckIns);\n                        localStorage.AllCheckIns =\n                            JSON.stringify(NewAllCheckIns);\n                    }}\n                >\n                    &#128465;\n                </div>\n            ) : (\n                <span />\n            )}\n        </div>\n    );\n}\n","import React, { useState, useRef } from \"react\";\nimport GroupHeader from \"./GroupHeader\";\nimport GroupedCheckin from \"./GroupedCheckin\";\n\nexport default function Home({\n    AllCheckIns,\n    CheckInsGroupedByDate,\n    CheckInsGroupedByTag,\n    setAllCheckIns,\n    setSuccess,\n    setError,\n}) {\n    const hoursRef = useRef();\n    const tagRef = useRef();\n    const activityRef = useRef();\n    const GroupByRef = useRef();\n\n    const [GroupBy, setGroupBy] = useState(\"Date\");\n\n    // Renders checkins grouped by date\n    function renderCheckInsGroupedByDate() {\n        const output = [];\n\n        if (CheckInsGroupedByDate.length > 0) {\n            for (let group of CheckInsGroupedByDate) {\n                output.push(\n                    <GroupHeader key={group.date} content={group.date} />\n                );\n                output.push(\n                    <GroupedCheckin\n                        AllCheckIns={AllCheckIns}\n                        setAllCheckIns={(i) => setAllCheckIns(i)}\n                        className={\"GroupedCheckin Labels\"}\n                        key={\"labelsfor\" + group.date}\n                        data={{\n                            date: \"Date\",\n                            tag: \"Tag\",\n                            hours: \"Hours\",\n                            activity: \"Activity\",\n                        }}\n                    />\n                );\n                for (let checkin of group?.checkins) {\n                    output.push(\n                        <GroupedCheckin\n                            AllCheckIns={AllCheckIns}\n                            setAllCheckIns={(i) => setAllCheckIns(i)}\n                            className={\"GroupedCheckin\"}\n                            key={checkin.date + checkin.tag + checkin.activity}\n                            data={checkin}\n                        />\n                    );\n                }\n                output.push(<br key={\"br1for\" + group.date} />);\n                output.push(<br key={\"br2for\" + group.date} />);\n            }\n        }\n\n        return output;\n    }\n\n    // Renders checkins grouped by tag\n    function renderCheckInsGroupedByTag() {\n        const output = [];\n\n        if (CheckInsGroupedByTag.length > 0) {\n            for (let group of CheckInsGroupedByTag) {\n                output.push(\n                    <GroupHeader key={group.tag} content={group.tag} />\n                );\n                output.push(\n                    <GroupedCheckin\n                        AllCheckIns={AllCheckIns}\n                        setAllCheckIns={(i) => setAllCheckIns(i)}\n                        className={\"GroupedCheckin Labels\"}\n                        key={\"labelsfor\" + group.tag}\n                        data={{\n                            date: \"Date\",\n                            tag: \"Tag\",\n                            hours: \"Hours\",\n                            activity: \"Activity\",\n                        }}\n                    />\n                );\n                for (let checkin of group?.checkins) {\n                    output.push(\n                        <GroupedCheckin\n                            AllCheckIns={AllCheckIns}\n                            setAllCheckIns={(i) => setAllCheckIns(i)}\n                            className={\"GroupedCheckin\"}\n                            key={checkin.date + checkin.tag + checkin.activity}\n                            data={checkin}\n                        />\n                    );\n                }\n                output.push(<br key={\"br1for\" + group.tag} />);\n                output.push(<br key={\"br2for\" + group.tag} />);\n            }\n        }\n\n        return output;\n    }\n\n    return (\n        <div className=\"Home\">\n            <div className=\"Left\">\n                <div className=\"Top\">\n                    <div>\n                        <h2>All check ins</h2>\n                    </div>\n                    <br />\n                    <div>\n                        <label htmlFor=\"GroupBy\">Group by</label>\n                        <select\n                            name=\"GroupBy\"\n                            id=\"GroupBy\"\n                            value={GroupBy}\n                            ref={GroupByRef}\n                            onChange={() =>\n                                setGroupBy(GroupByRef.current.value)\n                            }\n                        >\n                            <option value=\"Date\">Date</option>\n                            <option value=\"Tag\">Tag</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"Bottom\">\n                    {GroupBy === \"Date\"\n                        ? renderCheckInsGroupedByDate()\n                        : renderCheckInsGroupedByTag()}\n                </div>\n            </div>\n            <div className=\"Right\">\n                <form\n                    onSubmit={(e) => {\n                        e.preventDefault();\n                        const hours = parseFloat(hoursRef.current.value);\n                        const tag = tagRef.current.value;\n                        const activity = activityRef.current.value;\n\n                        if (hours && tag && activity) {\n                            if (hours > 0) {\n                                const date = new Date().toLocaleDateString();\n\n                                setAllCheckIns([\n                                    ...AllCheckIns,\n                                    { date, hours, tag, activity },\n                                ]);\n\n                                localStorage.AllCheckIns = JSON.stringify([\n                                    ...AllCheckIns,\n                                    { date, hours, tag, activity },\n                                ]);\n\n                                hoursRef.current.value = null;\n                                tagRef.current.value = null;\n                                activityRef.current.value = null;\n                                setError(null);\n                                setSuccess(\"Successfully added check in\");\n                                setTimeout(() => {\n                                    setSuccess(null);\n                                }, 2000);\n                            } else {\n                                setSuccess(null);\n                                setError(\n                                    \"Please make sure Hours is a positive number\"\n                                );\n                                setTimeout(() => {\n                                    setError(null);\n                                }, 2000);\n                            }\n                        } else {\n                            setSuccess(null);\n                            setError(\n                                \"Please make sure all fields are filled in\"\n                            );\n                            setTimeout(() => {\n                                setError(null);\n                            }, 2000);\n                        }\n                    }}\n                >\n                    <h2>Add a check in</h2>\n                    <div>\n                        <label>\n                            <div>Hours</div>\n                            <input type=\"number\" step=\"any\" ref={hoursRef} />\n                        </label>\n                        <label>\n                            <div>Tag</div>\n                            <input type=\"text\" ref={tagRef} />\n                        </label>\n                        <label>\n                            <div>Activity</div>\n                            <input type=\"text\" ref={activityRef} />\n                        </label>\n                    </div>\n                    <div>\n                        <button>Add</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useRef } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nexport default function Visualization({\n    TagChartLabels,\n    TagChartData,\n    DayChartLabels,\n    DayChartData,\n}) {\n    const [DisplayChart, setDisplayChart] = useState(\"Tag\");\n    const DisplayChartRef = useRef();\n\n    const data = {\n        labels: DisplayChart === \"Tag\" ? TagChartLabels : DayChartLabels,\n        datasets: [\n            {\n                label: \"Total Hours Spent\",\n                data: DisplayChart === \"Tag\" ? TagChartData : DayChartData,\n                backgroundColor: [\n                    \"rgba(255, 99, 132, 0.2)\",\n                    \"rgba(54, 162, 235, 0.2)\",\n                    \"rgba(255, 206, 86, 0.2)\",\n                    \"rgba(75, 192, 192, 0.2)\",\n                    \"rgba(153, 102, 255, 0.2)\",\n                    \"rgba(255, 159, 64, 0.2)\",\n                ],\n                borderColor: [\n                    \"rgba(255, 99, 132, 1)\",\n                    \"rgba(54, 162, 235, 1)\",\n                    \"rgba(255, 206, 86, 1)\",\n                    \"rgba(75, 192, 192, 1)\",\n                    \"rgba(153, 102, 255, 1)\",\n                    \"rgba(255, 159, 64, 1)\",\n                ],\n                borderWidth: 1,\n            },\n        ],\n    };\n\n    const options = {\n        indexAxis: \"y\",\n        elements: {\n            bar: {\n                borderWidth: 2,\n            },\n        },\n        responsive: true,\n        plugins: {\n            legend: {\n                position: \"right\",\n            },\n            title: {\n                display: false,\n                text: \"Horizontal Bar Chart\",\n            },\n        },\n    };\n\n    return (\n        <div className=\"Visualization\">\n            <div className=\"Bar\">\n                <div>\n                    <select\n                        name=\"DisplayChart\"\n                        id=\"DisplayChart\"\n                        value={DisplayChart}\n                        ref={DisplayChartRef}\n                        onChange={() =>\n                            setDisplayChart(DisplayChartRef.current.value)\n                        }\n                    >\n                        <option value=\"Tag\">Total Hours Spent per Tag</option>\n                        <option value=\"Day\">Total Hours Spent per Day</option>\n                    </select>\n                </div>\n                <Bar data={data} options={options} />\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default function Toast({ className, text }) {\n    return (\n        <div className={className}>\n            <div>\n                <span>{text}</span>\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./Components/Shared/Navbar\";\nimport Home from \"./Components/Home/Home\";\nimport Visualization from \"./Components/Visualization/Visualization\";\nimport Toast from \"./Components/Shared/Toast\";\n\nexport default function App() {\n    const [DisplayHome, setDisplayHome] = useState(true);\n    const [AllCheckIns, setAllCheckIns] = useState([]);\n    const [Success, setSuccess] = useState(null);\n    const [Error, setError] = useState(null);\n    const [CheckInsGroupedByDate, setCheckInsGroupedByDate] = useState([]);\n    const [CheckInsGroupedByTag, setCheckInsGroupedByTag] = useState([]);\n    const [TagChartLabels, setTagChartLabels] = useState([]);\n    const [TagChartData, setTagChartData] = useState([]);\n    const [DayChartLabels, setDayChartLabels] = useState([]);\n    const [DayChartData, setDayChartData] = useState([]);\n\n    // Retrieves checkins from local storage if it exists already, creates checkins as an empty array otherwise\n    useEffect(() => {\n        if (localStorage.AllCheckIns) {\n            setAllCheckIns(JSON.parse(localStorage.AllCheckIns));\n        } else {\n            localStorage.AllCheckIns = JSON.stringify(AllCheckIns);\n        }\n    }, []);\n\n    // Groups checkins by date and saves to CheckInsGroupedByDate\n    useEffect(() => {\n        if (AllCheckIns.length > 0) {\n            const NewCheckInsGroupedByDate = [];\n\n            for (let i = AllCheckIns.length; i >= 0; i--) {\n                const date = AllCheckIns[i]?.date;\n                const dates = NewCheckInsGroupedByDate.map((i) => i.date);\n                const index = dates.findIndex((i) => i === date);\n                if (index === -1) {\n                    NewCheckInsGroupedByDate.push({\n                        date,\n                        checkins: [AllCheckIns[i]],\n                    });\n                } else {\n                    NewCheckInsGroupedByDate[index].checkins.push(\n                        AllCheckIns[i]\n                    );\n                }\n            }\n\n            setCheckInsGroupedByDate(\n                NewCheckInsGroupedByDate.filter((i) => i.date !== undefined)\n            );\n        }\n    }, [AllCheckIns]);\n\n    // Groups checkins by date and saves to CheckInsGroupedByTag\n    useEffect(() => {\n        const NewCheckInsGroupedByTag = [];\n\n        for (let i = AllCheckIns.length; i >= 0; i--) {\n            const tag = AllCheckIns[i]?.tag;\n            const tags = NewCheckInsGroupedByTag.map((i) => i.tag);\n            const index = tags.findIndex((i) => i === tag);\n            if (index === -1) {\n                NewCheckInsGroupedByTag.push({\n                    tag,\n                    checkins: [AllCheckIns[i]],\n                });\n            } else {\n                NewCheckInsGroupedByTag[index].checkins.push(AllCheckIns[i]);\n            }\n        }\n\n        setCheckInsGroupedByTag(\n            NewCheckInsGroupedByTag.filter((i) => i.tag !== undefined)\n        );\n    }, [AllCheckIns]);\n\n    // Creates labels and data for the chart Total Hours Spent by Tag\n    useEffect(() => {\n        const labels = [];\n        const data = [];\n\n        console.log(CheckInsGroupedByTag);\n\n        for (let group of CheckInsGroupedByTag) {\n            labels.push(group.tag);\n            let hours = 0;\n            for (let checkin of group.checkins) {\n                hours += checkin.hours;\n            }\n            data.push(hours);\n        }\n\n        setTagChartLabels(labels);\n        setTagChartData(data);\n    }, [CheckInsGroupedByTag]);\n\n    // Creates labels and data for the chart Total Hours Spent by Date\n    useEffect(() => {\n        const labels = [];\n        const data = [];\n\n        console.log(CheckInsGroupedByDate);\n\n        for (let group of CheckInsGroupedByDate) {\n            labels.push(group.date);\n            let hours = 0;\n            for (let checkin of group.checkins) {\n                hours += checkin.hours;\n            }\n            data.push(hours);\n        }\n\n        setDayChartLabels(labels);\n        setDayChartData(data);\n    }, [CheckInsGroupedByDate]);\n\n    return (\n        <>\n            {Success ? (\n                <>\n                    <Toast className=\"Success Toast\" text={Success} />\n                </>\n            ) : null}\n            {Error ? (\n                <>\n                    <Toast className=\"Error Toast\" text={Error} />\n                </>\n            ) : null}\n\n            <Navbar setDisplayHome={(i) => setDisplayHome(i)} />\n            {DisplayHome ? (\n                <Home\n                    AllCheckIns={AllCheckIns}\n                    CheckInsGroupedByDate={CheckInsGroupedByDate}\n                    CheckInsGroupedByTag={CheckInsGroupedByTag}\n                    setAllCheckIns={(i) => setAllCheckIns(i)}\n                    setSuccess={(i) => setSuccess(i)}\n                    setError={(i) => setError(i)}\n                />\n            ) : (\n                <Visualization\n                    TagChartLabels={TagChartLabels}\n                    TagChartData={TagChartData}\n                    DayChartLabels={DayChartLabels}\n                    DayChartData={DayChartData}\n                />\n            )}\n        </>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}